// Generated by CIRCT firtool-1.62.0
module processing_element_32(
  input         clock,
                reset,
  input  [7:0]  io_inputA_0,
                io_inputB_0,
  input  [16:0] io_inputC,
  input         io_propagateB,
  output [7:0]  io_outputA_0,
                io_outputB_0,
  output [16:0] io_outputC
);

  wire [15:0] _multiplyResult_multiplier_io_output_0;
  reg  [7:0]  registerA_0;
  reg  [7:0]  registerB_0;
  reg  [17:0] io_outputC_REG;
  always @(posedge clock) begin
    if (reset) begin
      registerA_0 <= 8'h0;
      registerB_0 <= 8'h0;
      io_outputC_REG <= 18'h0;
    end
    else begin
      registerA_0 <= io_inputA_0;
      if (io_propagateB)
        registerB_0 <= io_inputB_0;
      io_outputC_REG <=
        {{2{_multiplyResult_multiplier_io_output_0[15]}},
         _multiplyResult_multiplier_io_output_0} + {io_inputC[16], io_inputC};
    end
  end // always @(posedge)
  multiplier multiplyResult_multiplier (
    .clock       (clock),
    .reset       (reset),
    .io_inputA_0 (io_inputA_0),
    .io_inputB_0 (registerB_0),
    .io_output_0 (_multiplyResult_multiplier_io_output_0)
  );
  assign io_outputA_0 = registerA_0;
  assign io_outputB_0 = registerB_0;
  assign io_outputC = io_outputC_REG[16:0];
endmodule

