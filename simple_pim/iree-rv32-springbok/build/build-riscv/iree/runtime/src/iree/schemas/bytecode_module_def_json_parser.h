#ifndef BYTECODE_MODULE_DEF_JSON_PARSER_H
#define BYTECODE_MODULE_DEF_JSON_PARSER_H

/* Generated by flatcc 0.6.2 FlatBuffers schema compiler for C by dvide.com */

#include "flatcc/flatcc_json_parser.h"
#include "flatcc/flatcc_prologue.h"

/*
 * Parses the default root table or struct of the schema and constructs a FlatBuffer.
 *
 * Builder `B` must be initialized. `ctx` can be null but will hold
 * hold detailed error info on return when available.
 * Returns 0 on success, or error code.
 * `flags` : 0 by default, `flatcc_json_parser_f_skip_unknown` silently
 * ignores unknown table and structs fields, and union types.
 */
static int bytecode_module_def_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags);

static const char *iree_vm_AttrDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_TypeDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_FunctionSignatureDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_ModuleDependencyFlagBits_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *iree_vm_ModuleDependencyDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_ImportFlagBits_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *iree_vm_ImportFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_ExportFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_InternalFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_UncompressedDataDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_CompressionTypeDef_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int iree_vm_CompressionTypeDef_json_union_accept_type(uint8_t type);
static const char *iree_vm_CompressionTypeDef_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *iree_vm_RodataSegmentDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_RwdataSegmentDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_ModuleStateDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_FunctionDescriptor_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *iree_vm_FunctionDescriptor_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_CallSiteLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_FileLineColLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_FusedLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_NameLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_LocationTypeDef_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *pref);
static int iree_vm_LocationTypeDef_json_union_accept_type(uint8_t type);
static const char *iree_vm_LocationTypeDef_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);
static const char *iree_vm_BytecodeLocationDef_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base);
static const char *iree_vm_BytecodeLocationDef_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_FunctionSourceMapDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_DebugDatabaseDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *iree_vm_BytecodeModuleDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result);
static const char *bytecode_module_def_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *bytecode_module_def_local_iree_vm_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
int *value_type, uint64_t *value, int *aggregate);
static const char *bytecode_module_def_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate);

static const char *iree_vm_AttrDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x76616c7565000000) { /* "value" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                *pref = ref;
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "value" */
            if ((w & 0xffffff0000000000) == 0x6b65790000000000) { /* "key" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "key" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "key" */
        } /* "value" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_AttrDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_AttrDef_parse_json_table);
}

static const char *iree_vm_TypeDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x66756c6c5f6e616d) { /* descend "full_nam" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "e" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "e" */
        } else { /* descend "full_nam" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "full_nam" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_TypeDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_TypeDef_parse_json_table);
}

static const char *iree_vm_FunctionSignatureDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffff000000) == 0x6174747273000000) { /* "attrs" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
            if (mark != buf) {
                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                while (more) {
                    buf = iree_vm_AttrDef_parse_json_table(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                }
                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                *pref = ref;
            } else {
                goto pfguard1;
            }
        } else { /* "attrs" */
            goto pfguard1;
        } /* "attrs" */
        goto endpfguard1;
pfguard1:
        if (w == 0x63616c6c696e675f) { /* descend "calling_" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x636f6e76656e7469) { /* descend "conventi" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6f6e000000000000) { /* "on" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "on" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "on" */
            } else { /* descend "conventi" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "conventi" */
        } else { /* descend "calling_" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "calling_" */
endpfguard1:
        (void)0;
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_FunctionSignatureDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_FunctionSignatureDef_parse_json_table);
}

static const char *iree_vm_ModuleDependencyFlagBits_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x5245515549524544) { /* "REQUIRED" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "REQUIRED" */
        if (w == 0x4f5054494f4e414c) { /* "OPTIONAL" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "OPTIONAL" */
            return unmatched;
        } /* "OPTIONAL" */
    } /* "REQUIRED" */
    return buf;
}

static const char *iree_vm_ModuleDependencyDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6d696e696d756d5f) { /* branch "minimum_" */
            if ((w & 0xffffffffff000000) == 0x666c616773000000) { /* "flags" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            iree_vm_ModuleDependencyFlagBits_parse_json_enum,
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != UINT32_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "flags" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "flags" */
        } else { /* branch "minimum_" */
            if (w == 0x6d696e696d756d5f) { /* descend "minimum_" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x76657273696f6e00) { /* "version" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        uint32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_uint32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "version" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "version" */
            } else { /* descend "minimum_" */
                if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "name" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "name" */
            } /* descend "minimum_" */
        } /* branch "minimum_" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_ModuleDependencyDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_ModuleDependencyDef_parse_json_table);
}

static const char *iree_vm_ImportFlagBits_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x5245515549524544) { /* "REQUIRED" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
        if (buf != mark) {
            *value = UINT64_C(1), *value_sign = 0;
        } else {
            return unmatched;
        }
    } else { /* "REQUIRED" */
        if (w == 0x4f5054494f4e414c) { /* "OPTIONAL" */
            buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 8, aggregate);
            if (buf != mark) {
                *value = UINT64_C(2), *value_sign = 0;
            } else {
                return unmatched;
            }
        } else { /* "OPTIONAL" */
            return unmatched;
        } /* "OPTIONAL" */
    } /* "REQUIRED" */
    return buf;
}

static const char *iree_vm_ImportFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66756c6c5f6e616d) { /* branch "full_nam" */
            if ((w & 0xffffffffff000000) == 0x666c616773000000) { /* "flags" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                if (mark != buf) {
                    uint32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            iree_vm_ImportFlagBits_parse_json_enum,
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != UINT32_C(1) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_uint32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "flags" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "flags" */
        } else { /* branch "full_nam" */
            if (w == 0x66756c6c5f6e616d) { /* descend "full_nam" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "e" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "e" */
            } else { /* descend "full_nam" */
                if (w == 0x7369676e61747572) { /* descend "signatur" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            buf = iree_vm_FunctionSignatureDef_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "e" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "e" */
                } else { /* descend "signatur" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "signatur" */
            } /* descend "full_nam" */
        } /* branch "full_nam" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_ImportFunctionDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_ImportFunctionDef_parse_json_table);
}

static const char *iree_vm_ExportFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6c6f63616c5f6e61) { /* branch "local_na" */
            if (w == 0x696e7465726e616c) { /* descend "internal" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f6f7264696e616c) { /* "_ordinal" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "_ordinal" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "_ordinal" */
            } else { /* descend "internal" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "internal" */
        } else { /* branch "local_na" */
            if (w == 0x6c6f63616c5f6e61) { /* descend "local_na" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6d65000000000000) { /* "me" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "me" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "me" */
            } else { /* descend "local_na" */
                if (w == 0x7369676e61747572) { /* descend "signatur" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                        if (mark != buf) {
                            buf = iree_vm_FunctionSignatureDef_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "e" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "e" */
                } else { /* descend "signatur" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "signatur" */
            } /* descend "local_na" */
        } /* branch "local_na" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_ExportFunctionDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_ExportFunctionDef_parse_json_table);
}

static const char *iree_vm_InternalFunctionDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6c6f63616c5f6e61) { /* descend "local_na" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6d65000000000000) { /* "me" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "me" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "me" */
        } else { /* descend "local_na" */
            if (w == 0x7369676e61747572) { /* descend "signatur" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        buf = iree_vm_FunctionSignatureDef_parse_json_table(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "e" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "e" */
            } else { /* descend "signatur" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "signatur" */
        } /* descend "local_na" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_InternalFunctionDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_InternalFunctionDef_parse_json_table);
}

static const char *iree_vm_UncompressedDataDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 0)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        /* Table has no fields. */
        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_UncompressedDataDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_UncompressedDataDef_parse_json_table);
}

static const char *iree_vm_CompressionTypeDef_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* UncompressedDataDef */
        buf = iree_vm_UncompressedDataDef_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int iree_vm_CompressionTypeDef_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* UncompressedDataDef */
    default: return 0;
    }
}

static const char *iree_vm_CompressionTypeDef_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
        if (buf != mark) {
            *value = UINT64_C(0), *value_sign = 0;
        } else {
            goto pfguard1;
        }
    } else { /* "NONE" */
        goto pfguard1;
    } /* "NONE" */
    goto endpfguard1;
pfguard1:
    if (w == 0x556e636f6d707265) { /* descend "Uncompre" */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x7373656444617461) { /* descend "ssedData" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffff0000000000) == 0x4465660000000000) { /* "Def" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "Def" */
                return unmatched;
            } /* "Def" */
        } else { /* descend "ssedData" */
            return unmatched;
        } /* descend "ssedData" */
    } else { /* descend "Uncompre" */
        return unmatched;
    } /* descend "Uncompre" */
endpfguard1:
    (void)0;
    return buf;
}

static const char *iree_vm_RodataSegmentDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 5)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x656d626564646564) { /* branch "embedded" */
            if (w == 0x636f6d7072657373) { /* descend "compress" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x696f6e5f74797065) { /* descend "ion_type" */
                    /* descend prefix key "ion_type" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        buf = flatcc_json_parser_union(ctx, buf, end, 0, 1, h_unions, iree_vm_CompressionTypeDef_parse_json_union);
                    } else {
                        /* descend suffix "ion_type" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffff000000) == 0x5f74797065000000) { /* "_type" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                            if (mark != buf) {
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        iree_vm_CompressionTypeDef_parse_json_enum,
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_union_type(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, iree_vm_CompressionTypeDef_parse_json_union);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "_type" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "_type" */
                    } /* desend suffix "ion_type" */
                } else { /* descend "ion_type" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ion_type" */
            } else { /* descend "compress" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "compress" */
        } else { /* branch "embedded" */
            if (w < 0x65787465726e616c) { /* branch "external" */
                if (w == 0x656d626564646564) { /* descend "embedded" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffff000000) == 0x5f64617461000000) { /* "_data" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                        if (mark != buf) {
                            if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                            while (more) {
                                uint8_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_uint8_write_to_pe(pval, val);
                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                            }
                            ref = flatcc_builder_end_vector(ctx->ctx);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                            *pref = ref;
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "_data" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "_data" */
                } else { /* descend "embedded" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "embedded" */
            } else { /* branch "external" */
                if (w == 0x65787465726e616c) { /* descend "external" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x5f646174615f6c65) { /* descend "_data_le" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffff00000000) == 0x6e67746800000000) { /* "ngth" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                            if (mark != buf) {
                                uint64_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 4, 8, 8))) goto failed;
                                    flatbuffers_uint64_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "ngth" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "ngth" */
                    } else { /* descend "_data_le" */
                        if (w == 0x5f646174615f6f66) { /* descend "_data_of" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x6673657400000000) { /* "fset" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    uint64_t val = 0;
                                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                            bytecode_module_def_local_iree_vm_json_parser_enum,
                                            bytecode_module_def_global_json_parser_enum, 0 };
                                    buf = flatcc_json_parser_uint64(ctx, (mark = buf), end, &val);
                                    if (mark == buf) {
                                        buf = flatcc_json_parser_symbolic_uint64(ctx, (mark = buf), end, symbolic_parsers, &val);
                                        if (buf == mark || buf == end) goto failed;
                                    }
                                    if (val != UINT64_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 3, 8, 8))) goto failed;
                                        flatbuffers_uint64_write_to_pe(pval, val);
                                    }
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "fset" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "fset" */
                        } else { /* descend "_data_of" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_data_of" */
                    } /* descend "_data_le" */
                } else { /* descend "external" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "external" */
            } /* branch "external" */
        } /* branch "embedded" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_RodataSegmentDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_RodataSegmentDef_parse_json_table);
}

static const char *iree_vm_RwdataSegmentDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 1)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x627974655f73697a) { /* descend "byte_siz" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x6500000000000000) { /* "e" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "e" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "e" */
        } else { /* descend "byte_siz" */
            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
        } /* descend "byte_siz" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_RwdataSegmentDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_RwdataSegmentDef_parse_json_table);
}

static const char *iree_vm_ModuleStateDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x676c6f62616c5f62) { /* descend "global_b" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x797465735f636170) { /* descend "ytes_cap" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffff000000) == 0x6163697479000000) { /* "acity" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "acity" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "acity" */
            } else { /* descend "ytes_cap" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "ytes_cap" */
        } else { /* descend "global_b" */
            if (w == 0x676c6f62616c5f72) { /* descend "global_r" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x65665f636f756e74) { /* "ef_count" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                            if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                            flatbuffers_int32_write_to_pe(pval, val);
                        }
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "ef_count" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "ef_count" */
            } else { /* descend "global_r" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "global_r" */
        } /* descend "global_b" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_ModuleStateDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_ModuleStateDef_parse_json_table);
}

static const char *iree_vm_FunctionDescriptor_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x62797465636f6465) { /* descend "bytecode" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffffff00) == 0x5f6f666673657400) { /* "_offset" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "_offset" */
                if ((w & 0xffffffffffffff00) == 0x5f6c656e67746800) { /* "_length" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                    if (mark != buf) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        pval = (void *)((size_t)struct_base + 4);
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_int32_write_to_pe(pval, val);
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "_length" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "_length" */
            } /* "_offset" */
        } else { /* descend "bytecode" */
            if (w == 0x6933325f72656769) { /* descend "i32_regi" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x737465725f636f75) { /* descend "ster_cou" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6e74000000000000) { /* "nt" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                        if (mark != buf) {
                            int16_t val = 0;
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    bytecode_module_def_local_iree_vm_json_parser_enum,
                                    bytecode_module_def_global_json_parser_enum, 0 };
                            pval = (void *)((size_t)struct_base + 8);
                            buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                            if (mark == buf) {
                                buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                if (buf == mark || buf == end) goto failed;
                            }
                            flatbuffers_int16_write_to_pe(pval, val);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "nt" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "nt" */
                } else { /* descend "ster_cou" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ster_cou" */
            } else { /* descend "i32_regi" */
                if (w == 0x7265665f72656769) { /* descend "ref_regi" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x737465725f636f75) { /* descend "ster_cou" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffff000000000000) == 0x6e74000000000000) { /* "nt" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                            if (mark != buf) {
                                int16_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                pval = (void *)((size_t)struct_base + 10);
                                buf = flatcc_json_parser_int16(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_int16(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                flatbuffers_int16_write_to_pe(pval, val);
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "nt" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "nt" */
                    } else { /* descend "ster_cou" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "ster_cou" */
                } else { /* descend "ref_regi" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* descend "ref_regi" */
            } /* descend "i32_regi" */
        } /* descend "bytecode" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *iree_vm_FunctionDescriptor_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 12, 4))) goto failed;
    buf = iree_vm_FunctionDescriptor_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_FunctionDescriptor_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_FunctionDescriptor_parse_json_struct);
}

static const char *iree_vm_CallSiteLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if ((w & 0xffffffffffff0000) == 0x63616c6c65720000) { /* "caller" */
            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
            if (mark != buf) {
                int32_t val = 0;
                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                        bytecode_module_def_local_iree_vm_json_parser_enum,
                        bytecode_module_def_global_json_parser_enum, 0 };
                buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                if (mark == buf) {
                    buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                    if (buf == mark || buf == end) goto failed;
                }
                if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                    flatbuffers_int32_write_to_pe(pval, val);
                }
            } else {
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            }
        } else { /* "caller" */
            if ((w & 0xffffffffffff0000) == 0x63616c6c65650000) { /* "callee" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 0, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "callee" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "callee" */
        } /* "caller" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_CallSiteLocDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_CallSiteLocDef_parse_json_table);
}

static const char *iree_vm_FileLineColLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66696c656e616d65) { /* branch "filename" */
            if ((w & 0xffffffffffff0000) == 0x636f6c756d6e0000) { /* "column" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 2, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "column" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "column" */
        } else { /* branch "filename" */
            if ((w & 0xffffffff00000000) == 0x6c696e6500000000) { /* "line" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "line" */
                if (w == 0x66696c656e616d65) { /* "filename" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                    if (mark != buf) {
                        buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "filename" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "filename" */
            } /* "line" */
        } /* branch "filename" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_FileLineColLocDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_FileLineColLocDef_parse_json_table);
}

static const char *iree_vm_FusedLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6c6f636174696f6e) { /* descend "location" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                if (mark != buf) {
                    if (flatcc_builder_start_vector(ctx->ctx, 4, 4, UINT64_C(1073741823))) goto failed;
                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                    while (more) {
                        int32_t val = 0;
                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                bytecode_module_def_global_json_parser_enum, 0 };
                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                        buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                        if (mark == buf) {
                            buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                            if (buf == mark || buf == end) goto failed;
                        }
                        flatbuffers_int32_write_to_pe(pval, val);
                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                    }
                    ref = flatcc_builder_end_vector(ctx->ctx);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "s" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "s" */
        } else { /* descend "location" */
            if (w == 0x6d65746164617461) { /* "metadata" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "metadata" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "metadata" */
        } /* descend "location" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_FusedLocDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_FusedLocDef_parse_json_table);
}

static const char *iree_vm_NameLocDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6368696c645f6c6f) { /* descend "child_lo" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x636174696f6e0000) { /* "cation" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    if (val != INT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                        if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                        flatbuffers_int32_write_to_pe(pval, val);
                    }
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "cation" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "cation" */
        } else { /* descend "child_lo" */
            if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "name" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "name" */
        } /* descend "child_lo" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_NameLocDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_NameLocDef_parse_json_table);
}

static const char *iree_vm_LocationTypeDef_parse_json_union(flatcc_json_parser_t *ctx, const char *buf, const char *end, uint8_t type, flatcc_builder_ref_t *result)
{

    *result = 0;
    switch (type) {
    case 0: /* NONE */
        return flatcc_json_parser_none(ctx, buf, end);
    case 1: /* CallSiteLocDef */
        buf = iree_vm_CallSiteLocDef_parse_json_table(ctx, buf, end, result);
        break;
    case 2: /* FileLineColLocDef */
        buf = iree_vm_FileLineColLocDef_parse_json_table(ctx, buf, end, result);
        break;
    case 3: /* FusedLocDef */
        buf = iree_vm_FusedLocDef_parse_json_table(ctx, buf, end, result);
        break;
    case 4: /* NameLocDef */
        buf = iree_vm_NameLocDef_parse_json_table(ctx, buf, end, result);
        break;
    default:
        if (!(ctx->flags & flatcc_json_parser_f_skip_unknown)) {
            return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_unknown_union);
        } else {
            return flatcc_json_parser_generic_json(ctx, buf, end);
        }
    }
    if (ctx->error) return buf;
    if (!*result) {
        return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
    }
    return buf;
}

static int iree_vm_LocationTypeDef_json_union_accept_type(uint8_t type)
{
    switch (type) {
    case 0: return 1; /* NONE */
    case 1: return 1; /* CallSiteLocDef */
    case 2: return 1; /* FileLineColLocDef */
    case 3: return 1; /* FusedLocDef */
    case 4: return 1; /* NameLocDef */
    default: return 0;
    }
}

static const char *iree_vm_LocationTypeDef_parse_json_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_sign, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x46757365644c6f63) { /* branch "FusedLoc" */
        if (w == 0x43616c6c53697465) { /* descend "CallSite" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffff0000) == 0x4c6f634465660000) { /* "LocDef" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 6, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(1), *value_sign = 0;
                } else {
                    return unmatched;
                }
            } else { /* "LocDef" */
                return unmatched;
            } /* "LocDef" */
        } else { /* descend "CallSite" */
            if (w == 0x46696c654c696e65) { /* descend "FileLine" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x436f6c4c6f634465) { /* descend "ColLocDe" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xff00000000000000) == 0x6600000000000000) { /* "f" */
                        buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 1, aggregate);
                        if (buf != mark) {
                            *value = UINT64_C(2), *value_sign = 0;
                        } else {
                            return unmatched;
                        }
                    } else { /* "f" */
                        return unmatched;
                    } /* "f" */
                } else { /* descend "ColLocDe" */
                    return unmatched;
                } /* descend "ColLocDe" */
            } else { /* descend "FileLine" */
                return unmatched;
            } /* descend "FileLine" */
        } /* descend "CallSite" */
    } else { /* branch "FusedLoc" */
        if (w < 0x4e4f4e4500000000) { /* branch "NONE" */
            if (w == 0x46757365644c6f63) { /* descend "FusedLoc" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffff0000000000) == 0x4465660000000000) { /* "Def" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 3, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(3), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "Def" */
                    return unmatched;
                } /* "Def" */
            } else { /* descend "FusedLoc" */
                return unmatched;
            } /* descend "FusedLoc" */
        } else { /* branch "NONE" */
            if ((w & 0xffffffff00000000) == 0x4e4f4e4500000000) { /* "NONE" */
                buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 4, aggregate);
                if (buf != mark) {
                    *value = UINT64_C(0), *value_sign = 0;
                } else {
                    goto pfguard1;
                }
            } else { /* "NONE" */
                goto pfguard1;
            } /* "NONE" */
            goto endpfguard1;
pfguard1:
            if (w == 0x4e616d654c6f6344) { /* descend "NameLocD" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6566000000000000) { /* "ef" */
                    buf = flatcc_json_parser_match_constant(ctx, (mark = buf), end, 2, aggregate);
                    if (buf != mark) {
                        *value = UINT64_C(4), *value_sign = 0;
                    } else {
                        return unmatched;
                    }
                } else { /* "ef" */
                    return unmatched;
                } /* "ef" */
            } else { /* descend "NameLocD" */
                return unmatched;
            } /* descend "NameLocD" */
endpfguard1:
            (void)0;
        } /* branch "NONE" */
    } /* branch "FusedLoc" */
    return buf;
}

static const char *iree_vm_BytecodeLocationDef_parse_json_struct_inline(flatcc_json_parser_t *ctx, const char *buf, const char *end, void *struct_base)
{
    int more;
    flatcc_builder_ref_t ref;
    void *pval;
    const char *mark;
    uint64_t w;

    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x62797465636f6465) { /* descend "bytecode" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffffffffffffff00) == 0x5f6f666673657400) { /* "_offset" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 0);
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "_offset" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "_offset" */
        } else { /* descend "bytecode" */
            if (w == 0x6c6f636174696f6e) { /* "location" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                if (mark != buf) {
                    int32_t val = 0;
                    static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                            bytecode_module_def_local_iree_vm_json_parser_enum,
                            bytecode_module_def_global_json_parser_enum, 0 };
                    pval = (void *)((size_t)struct_base + 4);
                    buf = flatcc_json_parser_int32(ctx, (mark = buf), end, &val);
                    if (mark == buf) {
                        buf = flatcc_json_parser_symbolic_int32(ctx, (mark = buf), end, symbolic_parsers, &val);
                        if (buf == mark || buf == end) goto failed;
                    }
                    flatbuffers_int32_write_to_pe(pval, val);
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "location" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "location" */
        } /* descend "bytecode" */
        buf = flatcc_json_parser_object_end(ctx, buf, end , &more);
    }
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static const char *iree_vm_BytecodeLocationDef_parse_json_struct(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    void *pval;

    *result = 0;
    if (!(pval = flatcc_builder_start_struct(ctx->ctx, 8, 4))) goto failed;
    buf = iree_vm_BytecodeLocationDef_parse_json_struct_inline(ctx, buf, end, pval);
    if (ctx->error || !(*result = flatcc_builder_end_struct(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_BytecodeLocationDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_struct_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_BytecodeLocationDef_parse_json_struct);
}

static const char *iree_vm_FunctionSourceMapDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 2)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w == 0x6c6f63616c5f6e61) { /* descend "local_na" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if ((w & 0xffff000000000000) == 0x6d65000000000000) { /* "me" */
                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                if (mark != buf) {
                    buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                    *pref = ref;
                } else {
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                }
            } else { /* "me" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* "me" */
        } else { /* descend "local_na" */
            if (w == 0x6c6f636174696f6e) { /* descend "location" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        if (flatcc_builder_start_vector(ctx->ctx, 8, 4, UINT64_C(536870911))) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                            buf = iree_vm_BytecodeLocationDef_parse_json_struct_inline(ctx, buf, end, pval);
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 1))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "s" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "s" */
            } else { /* descend "location" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "location" */
        } /* descend "local_na" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_FunctionSourceMapDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_FunctionSourceMapDef_parse_json_table);
}

static const char *iree_vm_DebugDatabaseDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;
    size_t h_unions;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 3)) goto failed;
    if (end == flatcc_json_parser_prepare_unions(ctx, buf, end, 1, &h_unions)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x6c6f636174696f6e) { /* branch "location" */
            if (w == 0x66756e6374696f6e) { /* descend "function" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xff00000000000000) == 0x7300000000000000) { /* "s" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 1);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = iree_vm_FunctionSourceMapDef_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "s" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "s" */
            } else { /* descend "function" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "function" */
        } else { /* branch "location" */
            if (w == 0x6c6f636174696f6e) { /* descend "location" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x5f7461626c655f74) { /* descend "_table_t" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffff0000000000) == 0x7970650000000000) { /* "ype" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 3);
                        if (mark != buf) {
                            static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                    iree_vm_LocationTypeDef_parse_json_enum,
                                    bytecode_module_def_local_iree_vm_json_parser_enum,
                                    bytecode_module_def_global_json_parser_enum, 0 };
                            buf = flatcc_json_parser_union_type_vector(ctx, buf, end, 0, 1, h_unions, symbolic_parsers, iree_vm_LocationTypeDef_parse_json_union, iree_vm_LocationTypeDef_json_union_accept_type);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "ype" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "ype" */
                } else { /* descend "_table_t" */
                    if ((w & 0xffffffffffff0000) == 0x5f7461626c650000) { /* "_table" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                        if (mark != buf) {
                            buf = flatcc_json_parser_union_vector(ctx, buf, end, 0, 1, h_unions, iree_vm_LocationTypeDef_parse_json_union);
                        } else {
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        }
                    } else { /* "_table" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* "_table" */
                } /* descend "_table_t" */
            } else { /* descend "location" */
                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
            } /* descend "location" */
        } /* branch "location" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    buf = flatcc_json_parser_finalize_unions(ctx, buf, end, h_unions);
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_DebugDatabaseDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_DebugDatabaseDef_parse_json_table);
}

static const char *iree_vm_BytecodeModuleDef_parse_json_table(flatcc_json_parser_t *ctx, const char *buf, const char *end, flatcc_builder_ref_t *result)
{
    int more;
    void *pval;
    flatcc_builder_ref_t ref, *pref;
    const char *mark;
    uint64_t w;

    *result = 0;
    if (flatcc_builder_start_table(ctx->ctx, 14)) goto failed;
    buf = flatcc_json_parser_object_start(ctx, buf, end, &more);
    while (more) {
        buf = flatcc_json_parser_symbol_start(ctx, buf, end);
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x66756e6374696f6e) { /* branch "function" */
            if (w < 0x62797465636f6465) { /* branch "bytecode" */
                if ((w & 0xffffffffff000000) == 0x6174747273000000) { /* "attrs" */
                    buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                    if (mark != buf) {
                        if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                        buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                        while (more) {
                            buf = iree_vm_AttrDef_parse_json_table(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                            *pref = ref;
                            buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                        }
                        ref = flatcc_builder_end_offset_vector(ctx->ctx);
                        if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 2))) goto failed;
                        *pref = ref;
                    } else {
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    }
                } else { /* "attrs" */
                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                } /* "attrs" */
            } else { /* branch "bytecode" */
                if (w < 0x64656275675f6461) { /* branch "debug_da" */
                    if (w == 0x62797465636f6465) { /* descend "bytecode" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f76657273696f6e) { /* "_version" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 8);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 11, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "_version" */
                            if ((w & 0xffffffffff000000) == 0x5f64617461000000) { /* "_data" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                if (mark != buf) {
                                    if (flatcc_builder_start_vector(ctx->ctx, 1, 1, UINT64_C(4294967295))) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        uint8_t val = 0;
                                        static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                                bytecode_module_def_local_iree_vm_json_parser_enum,
                                                bytecode_module_def_global_json_parser_enum, 0 };
                                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                        buf = flatcc_json_parser_uint8(ctx, (mark = buf), end, &val);
                                        if (mark == buf) {
                                            buf = flatcc_json_parser_symbolic_uint8(ctx, (mark = buf), end, symbolic_parsers, &val);
                                            if (buf == mark || buf == end) goto failed;
                                        }
                                        flatbuffers_uint8_write_to_pe(pval, val);
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 12))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "_data" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "_data" */
                        } /* "_version" */
                    } else { /* descend "bytecode" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "bytecode" */
                } else { /* branch "debug_da" */
                    if (w < 0x646570656e64656e) { /* branch "dependen" */
                        if (w == 0x64656275675f6461) { /* descend "debug_da" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffff0000) == 0x7461626173650000) { /* "tabase" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 6);
                                if (mark != buf) {
                                    buf = iree_vm_DebugDatabaseDef_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 13))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "tabase" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "tabase" */
                        } else { /* descend "debug_da" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "debug_da" */
                    } else { /* branch "dependen" */
                        if (w == 0x646570656e64656e) { /* descend "dependen" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x6369657300000000) { /* "cies" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        buf = iree_vm_ModuleDependencyDef_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                        *pref = ref;
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 4))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "cies" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "cies" */
                        } else { /* descend "dependen" */
                            if (w == 0x6578706f72746564) { /* descend "exported" */
                                buf += 8;
                                w = flatcc_json_parser_symbol_part(buf, end);
                                if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                                    buf += 8;
                                    w = flatcc_json_parser_symbol_part(buf, end);
                                    if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                        if (mark != buf) {
                                            if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                            buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                            while (more) {
                                                buf = iree_vm_ExportFunctionDef_parse_json_table(ctx, buf, end, &ref);
                                                if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                                *pref = ref;
                                                buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                            }
                                            ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 6))) goto failed;
                                            *pref = ref;
                                        } else {
                                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                        }
                                    } else { /* "ns" */
                                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                    } /* "ns" */
                                } else { /* descend "_functio" */
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                } /* descend "_functio" */
                            } else { /* descend "exported" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* descend "exported" */
                        } /* descend "dependen" */
                    } /* branch "dependen" */
                } /* branch "debug_da" */
            } /* branch "bytecode" */
        } else { /* branch "function" */
            if (w < 0x6e616d6500000000) { /* branch "name" */
                if (w < 0x696d706f72746564) { /* branch "imported" */
                    if (w == 0x66756e6374696f6e) { /* descend "function" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f64657363726970) { /* descend "_descrip" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x746f727300000000) { /* "tors" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    if (flatcc_builder_start_vector(ctx->ctx, 12, 4, UINT64_C(357913941))) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        if (!(pval = flatcc_builder_extend_vector(ctx->ctx, 1))) goto failed;
                                        buf = iree_vm_FunctionDescriptor_parse_json_struct_inline(ctx, buf, end, pval);
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 10))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "tors" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "tors" */
                        } else { /* descend "_descrip" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_descrip" */
                    } else { /* descend "function" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "function" */
                } else { /* branch "imported" */
                    if (w == 0x696d706f72746564) { /* descend "imported" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x5f66756e6374696f) { /* descend "_functio" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffff000000000000) == 0x6e73000000000000) { /* "ns" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 2);
                                if (mark != buf) {
                                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        buf = iree_vm_ImportFunctionDef_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                        *pref = ref;
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 5))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "ns" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "ns" */
                        } else { /* descend "_functio" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "_functio" */
                    } else { /* descend "imported" */
                        if (w == 0x6d6f64756c655f73) { /* descend "module_s" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffff00000000) == 0x7461746500000000) { /* "tate" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                                if (mark != buf) {
                                    buf = iree_vm_ModuleStateDef_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 9))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "tate" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "tate" */
                        } else { /* descend "module_s" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "module_s" */
                    } /* descend "imported" */
                } /* branch "imported" */
            } else { /* branch "name" */
                if (w < 0x7277646174615f73) { /* branch "rwdata_s" */
                    if ((w & 0xffffffff00000000) == 0x6e616d6500000000) { /* "name" */
                        buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 4);
                        if (mark != buf) {
                            buf = flatcc_json_parser_build_string(ctx, buf, end, &ref);
                            if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 0))) goto failed;
                            *pref = ref;
                        } else {
                            goto pfguard1;
                        }
                    } else { /* "name" */
                        goto pfguard1;
                    } /* "name" */
                    goto endpfguard1;
pfguard1:
                    if (w == 0x726f646174615f73) { /* descend "rodata_s" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if ((w & 0xffffffffffffff00) == 0x65676d656e747300) { /* "egments" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                while (more) {
                                    buf = iree_vm_RodataSegmentDef_parse_json_table(ctx, buf, end, &ref);
                                    if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                    *pref = ref;
                                    buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                }
                                ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 7))) goto failed;
                                *pref = ref;
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "egments" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* "egments" */
                    } else { /* descend "rodata_s" */
                        buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                    } /* descend "rodata_s" */
endpfguard1:
                    (void)0;
                } else { /* branch "rwdata_s" */
                    if (w < 0x7479706573000000) { /* branch "types" */
                        if (w == 0x7277646174615f73) { /* descend "rwdata_s" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if ((w & 0xffffffffffffff00) == 0x65676d656e747300) { /* "egments" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                                if (mark != buf) {
                                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        buf = iree_vm_RwdataSegmentDef_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                        *pref = ref;
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 8))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "egments" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "egments" */
                        } else { /* descend "rwdata_s" */
                            buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                        } /* descend "rwdata_s" */
                    } else { /* branch "types" */
                        if ((w & 0xffffffffffffff00) == 0x76657273696f6e00) { /* "version" */
                            buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 7);
                            if (mark != buf) {
                                uint32_t val = 0;
                                static flatcc_json_parser_integral_symbol_f *symbolic_parsers[] = {
                                        bytecode_module_def_local_iree_vm_json_parser_enum,
                                        bytecode_module_def_global_json_parser_enum, 0 };
                                buf = flatcc_json_parser_uint32(ctx, (mark = buf), end, &val);
                                if (mark == buf) {
                                    buf = flatcc_json_parser_symbolic_uint32(ctx, (mark = buf), end, symbolic_parsers, &val);
                                    if (buf == mark || buf == end) goto failed;
                                }
                                if (val != UINT32_C(0) || (ctx->flags & flatcc_json_parser_f_force_add)) {
                                    if (!(pval = flatcc_builder_table_add(ctx->ctx, 1, 4, 4))) goto failed;
                                    flatbuffers_uint32_write_to_pe(pval, val);
                                }
                            } else {
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            }
                        } else { /* "version" */
                            if ((w & 0xffffffffff000000) == 0x7479706573000000) { /* "types" */
                                buf = flatcc_json_parser_match_symbol(ctx, (mark = buf), end, 5);
                                if (mark != buf) {
                                    if (flatcc_builder_start_offset_vector(ctx->ctx)) goto failed;
                                    buf = flatcc_json_parser_array_start(ctx, buf, end, &more);
                                    while (more) {
                                        buf = iree_vm_TypeDef_parse_json_table(ctx, buf, end, &ref);
                                        if (!ref || !(pref = flatcc_builder_extend_offset_vector(ctx->ctx, 1))) goto failed;
                                        *pref = ref;
                                        buf = flatcc_json_parser_array_end(ctx, buf, end, &more);
                                    }
                                    ref = flatcc_builder_end_offset_vector(ctx->ctx);
                                    if (!ref || !(pref = flatcc_builder_table_add_offset(ctx->ctx, 3))) goto failed;
                                    *pref = ref;
                                } else {
                                    buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                                }
                            } else { /* "types" */
                                buf = flatcc_json_parser_unmatched_symbol(ctx, buf, end);
                            } /* "types" */
                        } /* "version" */
                    } /* branch "types" */
                } /* branch "rwdata_s" */
            } /* branch "name" */
        } /* branch "function" */
        buf = flatcc_json_parser_object_end(ctx, buf, end, &more);
    }
    if (ctx->error) goto failed;
    if (!flatcc_builder_check_required_field(ctx->ctx, 0)
    ) {
        buf = flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_required);
        goto failed;
    }
    if (!(*result = flatcc_builder_end_table(ctx->ctx))) goto failed;
    return buf;
failed:
    return flatcc_json_parser_set_error(ctx, buf, end, flatcc_json_parser_error_runtime);
}

static inline int iree_vm_BytecodeModuleDef_parse_json_as_root(flatcc_builder_t *B, flatcc_json_parser_t *ctx, const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags, const char *fid)
{
    return flatcc_json_parser_table_as_root(B, ctx, buf, bufsiz, flags, fid, iree_vm_BytecodeModuleDef_parse_json_table);
}

static const char *bytecode_module_def_local_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    /* Scope has no enum / union types to look up. */
    return buf; /* unmatched; */
}

static const char *bytecode_module_def_local_iree_vm_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w < 0x496d706f7274466c) { /* branch "ImportFl" */
        if (w == 0x436f6d7072657373) { /* descend "Compress" */
            buf += 8;
            w = flatcc_json_parser_symbol_part(buf, end);
            if (w == 0x696f6e5479706544) { /* descend "ionTypeD" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffff000000000000) == 0x6566000000000000) { /* "ef" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                    if (buf != mark) {
                        buf = iree_vm_CompressionTypeDef_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "ef" */
                    return unmatched;
                } /* "ef" */
            } else { /* descend "ionTypeD" */
                return unmatched;
            } /* descend "ionTypeD" */
        } else { /* descend "Compress" */
            return unmatched;
        } /* descend "Compress" */
    } else { /* branch "ImportFl" */
        if (w < 0x4c6f636174696f6e) { /* branch "Location" */
            if (w == 0x496d706f7274466c) { /* descend "ImportFl" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffff0000) == 0x6167426974730000) { /* "agBits" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                    if (buf != mark) {
                        buf = iree_vm_ImportFlagBits_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "agBits" */
                    return unmatched;
                } /* "agBits" */
            } else { /* descend "ImportFl" */
                return unmatched;
            } /* descend "ImportFl" */
        } else { /* branch "Location" */
            if (w == 0x4c6f636174696f6e) { /* descend "Location" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if ((w & 0xffffffffffffff00) == 0x5479706544656600) { /* "TypeDef" */
                    buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                    if (buf != mark) {
                        buf = iree_vm_LocationTypeDef_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                    } else {
                        return unmatched;
                    }
                } else { /* "TypeDef" */
                    return unmatched;
                } /* "TypeDef" */
            } else { /* descend "Location" */
                if (w == 0x4d6f64756c654465) { /* descend "ModuleDe" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if (w == 0x70656e64656e6379) { /* descend "pendency" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x466c616742697473) { /* "FlagBits" */
                            buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                            if (buf != mark) {
                                buf = iree_vm_ModuleDependencyFlagBits_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                            } else {
                                return unmatched;
                            }
                        } else { /* "FlagBits" */
                            return unmatched;
                        } /* "FlagBits" */
                    } else { /* descend "pendency" */
                        return unmatched;
                    } /* descend "pendency" */
                } else { /* descend "ModuleDe" */
                    return unmatched;
                } /* descend "ModuleDe" */
            } /* descend "Location" */
        } /* branch "Location" */
    } /* branch "ImportFl" */
    return buf;
}

static const char *bytecode_module_def_global_json_parser_enum(flatcc_json_parser_t *ctx, const char *buf, const char *end,
        int *value_type, uint64_t *value, int *aggregate)
{
    const char *unmatched = buf;
    const char *mark;
    uint64_t w;

    w = flatcc_json_parser_symbol_part(buf, end);
    if (w == 0x697265652e766d2e) { /* descend "iree.vm." */
        buf += 8;
        w = flatcc_json_parser_symbol_part(buf, end);
        if (w < 0x496d706f7274466c) { /* branch "ImportFl" */
            if (w == 0x436f6d7072657373) { /* descend "Compress" */
                buf += 8;
                w = flatcc_json_parser_symbol_part(buf, end);
                if (w == 0x696f6e5479706544) { /* descend "ionTypeD" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffff000000000000) == 0x6566000000000000) { /* "ef" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 2);
                        if (buf != mark) {
                            buf = iree_vm_CompressionTypeDef_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "ef" */
                        return unmatched;
                    } /* "ef" */
                } else { /* descend "ionTypeD" */
                    return unmatched;
                } /* descend "ionTypeD" */
            } else { /* descend "Compress" */
                return unmatched;
            } /* descend "Compress" */
        } else { /* branch "ImportFl" */
            if (w < 0x4c6f636174696f6e) { /* branch "Location" */
                if (w == 0x496d706f7274466c) { /* descend "ImportFl" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffff0000) == 0x6167426974730000) { /* "agBits" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 6);
                        if (buf != mark) {
                            buf = iree_vm_ImportFlagBits_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "agBits" */
                        return unmatched;
                    } /* "agBits" */
                } else { /* descend "ImportFl" */
                    return unmatched;
                } /* descend "ImportFl" */
            } else { /* branch "Location" */
                if (w == 0x4c6f636174696f6e) { /* descend "Location" */
                    buf += 8;
                    w = flatcc_json_parser_symbol_part(buf, end);
                    if ((w & 0xffffffffffffff00) == 0x5479706544656600) { /* "TypeDef" */
                        buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 7);
                        if (buf != mark) {
                            buf = iree_vm_LocationTypeDef_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                        } else {
                            return unmatched;
                        }
                    } else { /* "TypeDef" */
                        return unmatched;
                    } /* "TypeDef" */
                } else { /* descend "Location" */
                    if (w == 0x4d6f64756c654465) { /* descend "ModuleDe" */
                        buf += 8;
                        w = flatcc_json_parser_symbol_part(buf, end);
                        if (w == 0x70656e64656e6379) { /* descend "pendency" */
                            buf += 8;
                            w = flatcc_json_parser_symbol_part(buf, end);
                            if (w == 0x466c616742697473) { /* "FlagBits" */
                                buf = flatcc_json_parser_match_scope(ctx, (mark = buf), end, 8);
                                if (buf != mark) {
                                    buf = iree_vm_ModuleDependencyFlagBits_parse_json_enum(ctx, buf, end, value_type, value, aggregate);
                                } else {
                                    return unmatched;
                                }
                            } else { /* "FlagBits" */
                                return unmatched;
                            } /* "FlagBits" */
                        } else { /* descend "pendency" */
                            return unmatched;
                        } /* descend "pendency" */
                    } else { /* descend "ModuleDe" */
                        return unmatched;
                    } /* descend "ModuleDe" */
                } /* descend "Location" */
            } /* branch "Location" */
        } /* branch "ImportFl" */
    } else { /* descend "iree.vm." */
        return unmatched;
    } /* descend "iree.vm." */
    return buf;
}

static int bytecode_module_def_parse_json(flatcc_builder_t *B, flatcc_json_parser_t *ctx,
        const char *buf, size_t bufsiz, flatcc_json_parser_flags_t flags)
{
    flatcc_json_parser_t parser;
    flatcc_builder_ref_t root;

    ctx = ctx ? ctx : &parser;
    flatcc_json_parser_init(ctx, B, buf, buf + bufsiz, flags);
    if (flatcc_builder_start_buffer(B, "IREE", 0, 0)) return -1;
    iree_vm_BytecodeModuleDef_parse_json_table(ctx, buf, buf + bufsiz, &root);
    if (ctx->error) {
        return ctx->error;
    }
    if (!flatcc_builder_end_buffer(B, root)) return -1;
    ctx->end_loc = buf;
    return 0;
}

#include "flatcc/flatcc_epilogue.h"
#endif /* BYTECODE_MODULE_DEF_JSON_PARSER_H */
