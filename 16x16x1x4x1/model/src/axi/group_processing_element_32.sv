// Generated by CIRCT firtool-1.62.0
module group_processing_element_32(
  input         clock,
                reset,
  input  [7:0]  io_inputA_0,
                io_inputB_0,
                io_inputB_1,
                io_inputB_2,
                io_inputB_3,
  input  [17:0] io_inputC_0,
                io_inputC_1,
                io_inputC_2,
                io_inputC_3,
  input         io_propagateB_0,
  output [7:0]  io_outputA_0,
                io_outputB_0,
                io_outputB_1,
                io_outputB_2,
                io_outputB_3,
  output [17:0] io_outputC_0,
                io_outputC_1,
                io_outputC_2,
                io_outputC_3
);

  wire [17:0] _vectorProcessingElementVector_0_3_io_outputC;
  wire [17:0] _vectorProcessingElementVector_0_2_io_outputC;
  wire [17:0] _vectorProcessingElementVector_0_1_io_outputC;
  wire [17:0] _vectorProcessingElementVector_0_0_io_outputC;
  reg  [7:0]  REG_0;
  reg  [17:0] io_outputC_0_REG;
  reg  [17:0] io_outputC_1_REG;
  reg  [17:0] io_outputC_2_REG;
  reg  [17:0] io_outputC_3_REG;
  always @(posedge clock) begin
    if (reset) begin
      REG_0 <= 8'h0;
      io_outputC_0_REG <= 18'h0;
      io_outputC_1_REG <= 18'h0;
      io_outputC_2_REG <= 18'h0;
      io_outputC_3_REG <= 18'h0;
    end
    else begin
      REG_0 <= io_inputA_0;
      io_outputC_0_REG <= _vectorProcessingElementVector_0_0_io_outputC;
      io_outputC_1_REG <= _vectorProcessingElementVector_0_1_io_outputC;
      io_outputC_2_REG <= _vectorProcessingElementVector_0_2_io_outputC;
      io_outputC_3_REG <= _vectorProcessingElementVector_0_3_io_outputC;
    end
  end // always @(posedge)
  processing_element_128 vectorProcessingElementVector_0_0 (
    .clock         (clock),
    .reset         (reset),
    .io_inputA_0   (io_inputA_0),
    .io_inputB_0   (io_inputB_0),
    .io_inputC     (io_inputC_0),
    .io_propagateB (io_propagateB_0),
    .io_outputB_0  (io_outputB_0),
    .io_outputC    (_vectorProcessingElementVector_0_0_io_outputC)
  );
  processing_element_128 vectorProcessingElementVector_0_1 (
    .clock         (clock),
    .reset         (reset),
    .io_inputA_0   (io_inputA_0),
    .io_inputB_0   (io_inputB_1),
    .io_inputC     (io_inputC_1),
    .io_propagateB (io_propagateB_0),
    .io_outputB_0  (io_outputB_1),
    .io_outputC    (_vectorProcessingElementVector_0_1_io_outputC)
  );
  processing_element_128 vectorProcessingElementVector_0_2 (
    .clock         (clock),
    .reset         (reset),
    .io_inputA_0   (io_inputA_0),
    .io_inputB_0   (io_inputB_2),
    .io_inputC     (io_inputC_2),
    .io_propagateB (io_propagateB_0),
    .io_outputB_0  (io_outputB_2),
    .io_outputC    (_vectorProcessingElementVector_0_2_io_outputC)
  );
  processing_element_128 vectorProcessingElementVector_0_3 (
    .clock         (clock),
    .reset         (reset),
    .io_inputA_0   (io_inputA_0),
    .io_inputB_0   (io_inputB_3),
    .io_inputC     (io_inputC_3),
    .io_propagateB (io_propagateB_0),
    .io_outputB_0  (io_outputB_3),
    .io_outputC    (_vectorProcessingElementVector_0_3_io_outputC)
  );
  assign io_outputA_0 = REG_0;
  assign io_outputC_0 = io_outputC_0_REG;
  assign io_outputC_1 = io_outputC_1_REG;
  assign io_outputC_2 = io_outputC_2_REG;
  assign io_outputC_3 = io_outputC_3_REG;
endmodule

